name: pytest
on: [push]
jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.2.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Install Dependencies
        run: poetry install -E gateway -E solver -E aws -E azure -E gcp
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run unit tests
        run: |
          poetry run skyplane init -y --disable-config-aws --disable-config-azure --disable-config-gcp
          poetry run pytest -s tests/unit_nocloud
  test-aws:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.2.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: aws-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            aws-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Install Dependencies
        run: poetry install -E gateway -E solver -E aws -E azure -E gcp
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run cloud tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          poetry run skyplane init -y --disable-config-azure --disable-config-gcp
          poetry run pytest -s tests/unit_aws
  test-azure:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.2.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: |
            ~/.virtualenvs
            /var/cache/apt/archives
          key: azure-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            azure-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      - name: Install Dependencies
        run: poetry install -E gateway -E solver -E aws -E azure -E gcp
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run cloud tests
        run: |
          poetry run pip freeze
          poetry run skyplane init -y --disable-config-aws --disable-config-gcp
          poetry run pytest -s tests/unit_azure
  test-gcp:
    runs-on: ubuntu-latest
    needs: test-unit
    env:
      STRATEGY_UUID: pytest-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.2.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: gcp-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            gcp-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Install Dependencies
        run: poetry install -E gateway -E solver -E aws -E azure -E gcp
        if: steps.cache.outputs.cache-hit != 'true'
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: '${{ secrets.GCP_PROJECT_ID }}'
          export_default_credentials: true
      - name: Run cloud tests
        run: |
          poetry run skyplane config set gcp_service_account_name ${{ env.STRATEGY_UUID }}
          poetry run skyplane init -y --disable-config-aws --disable-config-azure
          poetry run pytest -s tests/unit_gcs
      - name: Cleanup GCP service account
        if: always()
        run: gcloud iam service-accounts delete ${{ env.STRATEGY_UUID }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
