name: poetry
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  black-pytype:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1
        with:
          version: 1.2.0b1
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config settings.virtualenvs.in-project false
          poetry config settings.virtualenvs.path ~/.virtualenvs
      - name: Install Dependencies
        run: poetry install --with gateway --with solver
        if: steps.cache.outputs.cache-hit != 'true'
      - name: black
        run: poetry run black . --check --line-length=140
      - name: pytype
        run: poetry run pytype --config .pytype.cfg -j 2

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1
        with:
          version: 1.2.0b1
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config settings.virtualenvs.in-project false
          poetry config settings.virtualenvs.path ~/.virtualenvs
      - name: Install Dependencies
        run: poetry install --with gateway --with solver
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run unit tests
        run: poetry run pytest tests/unit_nocloud
    #  - name: Run cloud tests
    #     # consider only running cloud tests for PRs to main once we go open source
    #     if: ${{ github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch }}
    #     run: |
    #       pytest skyplane/test/unit_aws
    #       pytest skyplane/test/unit_azure
    #       pytest skyplane/test/unit_gcp

  publish-pypi-test:
    runs-on: ubuntu-latest
    needs: [ black-pytype, unit-test ]
    if: ${{ github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch }}
    steps:
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1
        with:
          version: 1.2.0b1
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Install Dependencies
        run: poetry install --with gateway --with solver
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Build package
        run: poetry build
      - name: Publish package
        run: poetry publish -r test-pypi